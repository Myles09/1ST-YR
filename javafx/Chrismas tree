package application;

import javafx.application.Application;
import javafx.event.EventHandler;
import javafx.scene.Group;
import javafx.scene.Scene;
import javafx.scene.effect.Glow;
import javafx.scene.image.Image;
import javafx.scene.input.MouseEvent;
import javafx.scene.paint.Color;
import javafx.scene.paint.Paint;
import javafx.scene.shape.Circle;
import javafx.scene.shape.LineTo;
import javafx.scene.shape.MoveTo;
import javafx.scene.shape.Path;
import javafx.stage.Stage;  

public class Main extends Application {  
    
   private final static int NUMBER_BRANCHES = 4;      
   private final static int TOP_CENTER_X = 400;      
   private final static int TOP_CENTER_Y = 25;    
   private final static int DELTA_X = 125;      
   private final static int DELTA_Y = 100;       
   private final static int BRANCH_LENGTH = 75;     
   private final static int STUMP_WIDTH = 100;     
   private final static int STUMP_HEIGHT = 150;   
   private final static int LEFT_STUMP_X = TOP_CENTER_X - STUMP_WIDTH/2;    
   private final static int LEFT_STUMP_Y = TOP_CENTER_Y + DELTA_Y * NUMBER_BRANCHES;   
   private final static int TREE_BOTTOM_WIDTH = (DELTA_X-BRANCH_LENGTH) * NUMBER_BRANCHES * 2;  
   
   private static class Coordinate  
   {  
   
      final private int x;    
      final private int y;  
  
      public Coordinate(final int newX, final int newY)  
      {  
         this.x = newX;  
         this.y = newY;   
      }   
      public String toString()  
      {  
         return "(" + this.x + ", " + this.y + ")";  
      }  
   }
private Coordinate drawLeftSide(  
      final Path path, final int startingX, final int startingY)  
   {  
      int coordX = startingX - DELTA_X;  
      int coordY = startingY + DELTA_Y;  
      final LineTo topLeft = new LineTo(coordX, coordY);  
      path.getElements().add(topLeft);  
  
      coordX += BRANCH_LENGTH;  
      final LineTo topLeftHorizontal = new LineTo(coordX, coordY);  
      path.getElements().add(topLeftHorizontal);  
  
      coordX -= DELTA_X;  
      coordY += DELTA_Y;  
      final LineTo secondLeft = new LineTo(coordX, coordY);  
      path.getElements().add(secondLeft);  
  
      coordX += BRANCH_LENGTH;  
      final LineTo secondLeftHorizontal = new LineTo(coordX, coordY);  
      path.getElements().add(secondLeftHorizontal);  
  
      coordX -= DELTA_X;  
      coordY += DELTA_Y;  
      final LineTo thirdLeft = new LineTo(coordX, coordY);  
      path.getElements().add(thirdLeft);  
  
      coordX += BRANCH_LENGTH;  
      final LineTo thirdLeftHorizontal = new LineTo(coordX, coordY);  
      path.getElements().add(thirdLeftHorizontal);  
  
      coordX -= DELTA_X;  
      coordY += DELTA_Y;  
      final LineTo fourthLeft = new LineTo(coordX, coordY);  
      path.getElements().add(fourthLeft);  
  
      coordX += BRANCH_LENGTH;  
      final LineTo fourthLeftHorizontal = new LineTo(coordX, coordY);  
      path.getElements().add(fourthLeftHorizontal);  
  
      return new Coordinate(coordX, coordY);  
   }  
 
   private Coordinate drawRightSide(  
      final Path path, final int startingX, final int startingY)  
   {  
      int coordX = startingX + BRANCH_LENGTH;  
      int coordY = startingY;  
      final LineTo bottomHorizontal = new LineTo(coordX, coordY);  
      path.getElements().add(bottomHorizontal);  
  
      coordX -= DELTA_X;  
      coordY -= DELTA_Y;  
      final LineTo bottomBranch = new LineTo(coordX, coordY);  
      path.getElements().add(bottomBranch);  
  
      coordX += BRANCH_LENGTH;  
      final LineTo secondHorizontal = new LineTo(coordX, coordY);  
      path.getElements().add(secondHorizontal);  
  
      coordX -= DELTA_X;  
      coordY -= DELTA_Y;  
      final LineTo secondBottomBranch = new LineTo(coordX, coordY);  
      path.getElements().add(secondBottomBranch);  
  
      coordX += BRANCH_LENGTH;  
      final LineTo thirdHorizontal = new LineTo(coordX, coordY);  
      path.getElements().add(thirdHorizontal);  
  
      coordX -= DELTA_X;  
      coordY -= DELTA_Y;  
      final LineTo thirdBottomBranch = new LineTo(coordX, coordY);  
      path.getElements().add(thirdBottomBranch);  
  
      coordX += BRANCH_LENGTH;  
      final LineTo fourthHorizontal = new LineTo(coordX, coordY);  
      path.getElements().add(fourthHorizontal);  
  
      coordX -= DELTA_X;  
      coordY -= DELTA_Y;  
      final LineTo fourthBottomBranch = new LineTo(coordX, coordY);  
      path.getElements().add(fourthBottomBranch);  
  
      return new Coordinate(coordX, coordY);  
   }  
  
   private Path buildStumpPath()  
   {  
      final Path path = new Path();  
  
      int coordX = LEFT_STUMP_X;  
      int coordY = LEFT_STUMP_Y;  
      final MoveTo startingPoint = new MoveTo(coordX, coordY);  
      path.getElements().add(startingPoint);  
  
      coordY += STUMP_HEIGHT;  
      final LineTo leftStumpSide = new LineTo(coordX, coordY);  
      path.getElements().add(leftStumpSide);  
  
      coordX += STUMP_WIDTH;  
      final LineTo stumpBottom = new LineTo(coordX, coordY);  
      path.getElements().add(stumpBottom);  
  
      coordY -= STUMP_HEIGHT;  
      final LineTo rightStumpSide = new LineTo(coordX, coordY);  
      path.getElements().add(rightStumpSide);  
  
      coordX -= STUMP_WIDTH;  
      final LineTo topStump = new LineTo(coordX, coordY);  
      path.getElements().add(topStump);  
  
      path.setFill(Color.BROWN);  
  
      return path;  
   }  
 
   private Path buildChristmasTreePath()  
   {  
      int coordX = TOP_CENTER_X;  
      int coordY = TOP_CENTER_Y;  
      final Path path = new Path();  
      final MoveTo startingPoint = new MoveTo(coordX, coordY);  
      path.getElements().add(startingPoint);  
  
      final Coordinate bottomLeft = drawLeftSide(path, coordX, coordY);  
      coordX = bottomLeft.x + TREE_BOTTOM_WIDTH;  
      coordY = bottomLeft.y;  
  
      final LineTo treeBottom = new LineTo(coordX, coordY);  
      path.getElements().add(treeBottom);  
      drawRightSide(path, coordX, coordY);  
      path.setFill(Color.GREEN);   
      return path;  
   }  
   private Circle createInteractiveBulb(  
      final int centerX, final int centerY, final int radius, final Paint paint)  
   {  
      final Circle bulb = new Circle(centerX, centerY, radius, paint);  
      bulb.setOnMouseClicked(  
         new EventHandler<MouseEvent>()    
         {  
            public void handle(MouseEvent mouseEvent)  
            {  
               bulb.setEffect(new Glow(1.0));  
               bulb.setRadius(bulb.getRadius() + 5);  
            }  
         });  
      return bulb;  
   }  
   private void addBulbs(final Group group)  
   {  
      final Circle bulbOne = createInteractiveBulb(350,100,10, Color.VIOLET);  
      group.getChildren().add(bulbOne);  
      final Circle bulbTwo = createInteractiveBulb(285,210,10, Color.ORANGE);  
      group.getChildren().add(bulbTwo);  
      final Circle bulbThree = createInteractiveBulb(325,300,10, Color.BLUE);  
      group.getChildren().add(bulbThree);  
      final Circle bulbFour = createInteractiveBulb(475,290,10, Color.VIOLET);  
      group.getChildren().add(bulbFour);  
      final Circle bulbFive = createInteractiveBulb(380,150,10, Color.BLUE);  
      group.getChildren().add(bulbFive);  
      final Circle bulbSix = createInteractiveBulb(550,390,10, Color.VIOLET);  
      group.getChildren().add(bulbSix);  
      final Circle bulbSeven = createInteractiveBulb(375,400,10, Color.GOLD);  
      group.getChildren().add(bulbSeven);  
      final Circle bulbEight = createInteractiveBulb(445,195,10, Color.SILVER);  
      group.getChildren().add(bulbEight);  
      final Circle bulbNine = createInteractiveBulb(220,385,10, Color.RED);  
      group.getChildren().add(bulbNine);  
   }  
public void start(final Stage stage) throws Exception {  
	 Image icon = new Image("Christmas-Tree.png");
		stage.getIcons().add(icon);
      stage.setTitle("Ca√±edo, Justin Myles");  
      final Group rootGroup = new Group();  
      final Scene scene = new Scene(rootGroup, 1024, 768, Color.LIGHTGREEN);  
      stage.setScene(scene);  
      stage.show();  
              
      stage.setScene(scene);  
      rootGroup.getChildren().add(buildChristmasTreePath());  
      rootGroup.getChildren().add(buildStumpPath());  
      addBulbs(rootGroup);  
      addText(rootGroup); 
   }  
   private void addText(Group rootGroup) {
}
   public static void main(final String[] arguments)  
   {  
      Application.launch(arguments);  
   }  
}  
